# Universidad Austral Bot - Cursor Rules

## Project Overview
University chatbot with LangGraph + FastAPI + Supabase for WhatsApp student support.

**Stack:** Python 3.11, FastAPI, LangGraph, Supabase, Chatwoot, n8n

## Code Conventions

### Python Style
- **Type hints**: ALWAYS (mandatory)
- **Pydantic Models**: Prefer over dicts
- **Properties**: Use @property in models
- **Naming**: snake_case (vars), PascalCase (classes), UPPER_CASE (constants)

### Critical Rules

**ALWAYS:**
- ✅ Use Pydantic models, never raw dicts
- ✅ Add type hints to ALL functions
- ✅ Use try/except in tool calls
- ✅ Use logger, never print()
- ✅ Search codebase BEFORE creating files

**NEVER:**
- ❌ Modify main.py without approval
- ❌ Hardcode URLs or API keys
- ❌ Use blocking I/O in async functions
- ❌ Skip validation in Pydantic models

## Architecture

### Directory Structure
```
app/
├── core/          # Config, constants, exceptions
├── models/        # Pydantic models (use properties!)
├── agents/        # LangGraph agents
├── tools/         # n8n tool wrappers
├── database/      # Supabase repositories
└── integrations/  # Chatwoot, WhatsApp
```

### Key Patterns

**Repository Pattern:**
```python
# Return Pydantic models, not dicts
async def get_horarios(request: HorariosRequest) -> HorariosResponse:
    result = await self.supabase.table('horarios').select('*').execute()
    return HorariosResponse(horarios=[HorarioInfo(**row) for row in result.data])
```

**Agent Pattern:**
```python
async def process_query(self, query: str, user_info: Dict[str, Any]) -> str:
    try:
        query_type = self._classify(query)
        return await self._handle_by_type(query_type, user_info)
    except Exception as e:
        logger.error(f"Error: {e}", exc_info=True)
        return self._get_error_response(user_info)
```

## Common Commands

### Docker
```bash
# Rebuild
docker-compose down && docker-compose build --no-cache && docker-compose up -d

# Logs
docker-compose logs -f university-agent
```

### Testing
```bash
pytest tests/ -v
```

## Workflow

1. **Research**: Search codebase for patterns
2. **Plan**: Outline changes
3. **Implement**: Write typed code
4. **Test**: Verify functionality
5. **Review**: Check logs

## Specialized Tasks

### Backend/Architecture
When working on agents, LangGraph, or FastAPI:
- Design clean agent patterns
- Use Pydantic models with properties
- Implement proper error handling
- Optimize context management

### Database
When working with Supabase or repositories:
- Use repositories, never direct queries
- Return Pydantic models
- Validate UUIDs before queries
- Add computed properties to models

### Integration
When working with webhooks or APIs:
- Validate payloads with Pydantic
- Use async httpx, not requests
- Implement timeouts (30s)
- Log request/response

### Testing
When writing or fixing tests:
- Use pytest with async support
- Mock external services (n8n, Supabase)
- Run tests before implementing fixes
- Add regression tests for bugs

### DevOps
When working with Docker or deployment:
- Use .env.example for documentation
- Set resource limits in compose
- Configure health checks
- Monitor container logs

## Resources

- **LangGraph**: https://langchain-ai.github.io/langgraph/
- **Pydantic**: https://docs.pydantic.dev/
- **FastAPI**: https://fastapi.tiangolo.com/
